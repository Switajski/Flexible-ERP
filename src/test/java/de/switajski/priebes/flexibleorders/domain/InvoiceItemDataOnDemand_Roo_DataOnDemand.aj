// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.switajski.priebes.flexibleorders.domain;

import de.switajski.priebes.flexibleorders.domain.Customer;
import de.switajski.priebes.flexibleorders.domain.CustomerDataOnDemand;
import de.switajski.priebes.flexibleorders.domain.InvoiceItem;
import de.switajski.priebes.flexibleorders.domain.InvoiceItemDataOnDemand;
import de.switajski.priebes.flexibleorders.domain.InvoiceItemService;
import de.switajski.priebes.flexibleorders.domain.Product;
import de.switajski.priebes.flexibleorders.domain.ProductDataOnDemand;
import de.switajski.priebes.flexibleorders.reference.Country;
import de.switajski.priebes.flexibleorders.reference.Status;
import de.switajski.priebes.flexibleorders.repository.InvoiceItemRepository;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect InvoiceItemDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InvoiceItemDataOnDemand: @Component;
    
    private Random InvoiceItemDataOnDemand.rnd = new SecureRandom();
    
    private List<InvoiceItem> InvoiceItemDataOnDemand.data;
    
    @Autowired
    CustomerDataOnDemand InvoiceItemDataOnDemand.customerDataOnDemand;
    
    @Autowired
    ProductDataOnDemand InvoiceItemDataOnDemand.productDataOnDemand;
    
    @Autowired
    InvoiceItemService InvoiceItemDataOnDemand.invoiceItemService;
    
    @Autowired
    InvoiceItemRepository InvoiceItemDataOnDemand.invoiceItemRepository;
    
    public InvoiceItem InvoiceItemDataOnDemand.getNewTransientInvoiceItem(int index) {
        InvoiceItem obj = new InvoiceItem();
        setAccountNumber(obj, index);
        setCreated(obj, index);
        setCustomer(obj, index);
        setInvoiceCity(obj, index);
        setInvoiceCountry(obj, index);
        setInvoiceName1(obj, index);
        setInvoiceName2(obj, index);
        setInvoiceNumber(obj, index);
        setInvoicePostalCode(obj, index);
        setInvoiceStreet(obj, index);
        setOrderConfirmationNumber(obj, index);
        setOrderNumber(obj, index);
        setPriceNet(obj, index);
        setProduct(obj, index);
        setProductName(obj, index);
        setProductNumber(obj, index);
        setQuantity(obj, index);
        setStatus(obj, index);
        return obj;
    }
    
    public void InvoiceItemDataOnDemand.setAccountNumber(InvoiceItem obj, int index) {
        Long accountNumber = new Integer(index).longValue();
        obj.setAccountNumber(accountNumber);
    }
    
    public void InvoiceItemDataOnDemand.setCreated(InvoiceItem obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void InvoiceItemDataOnDemand.setCustomer(InvoiceItem obj, int index) {
        Customer customer = customerDataOnDemand.getRandomCustomer();
        obj.setCustomer(customer);
    }
    
    public void InvoiceItemDataOnDemand.setInvoiceCity(InvoiceItem obj, int index) {
        String invoiceCity = "invoiceCity_" + index;
        obj.setInvoiceCity(invoiceCity);
    }
    
    public void InvoiceItemDataOnDemand.setInvoiceCountry(InvoiceItem obj, int index) {
        Country invoiceCountry = Country.class.getEnumConstants()[0];
        obj.setInvoiceCountry(invoiceCountry);
    }
    
    public void InvoiceItemDataOnDemand.setInvoiceName1(InvoiceItem obj, int index) {
        String invoiceName1 = "invoiceName1_" + index;
        obj.setInvoiceName1(invoiceName1);
    }
    
    public void InvoiceItemDataOnDemand.setInvoiceName2(InvoiceItem obj, int index) {
        String invoiceName2 = "invoiceName2_" + index;
        obj.setInvoiceName2(invoiceName2);
    }
    
    public void InvoiceItemDataOnDemand.setInvoiceNumber(InvoiceItem obj, int index) {
        Long invoiceNumber = new Integer(index).longValue();
        obj.setInvoiceNumber(invoiceNumber);
    }
    
    public void InvoiceItemDataOnDemand.setInvoicePostalCode(InvoiceItem obj, int index) {
        int invoicePostalCode = index;
        obj.setInvoicePostalCode(invoicePostalCode);
    }
    
    public void InvoiceItemDataOnDemand.setInvoiceStreet(InvoiceItem obj, int index) {
        String invoiceStreet = "invoiceStreet_" + index;
        obj.setInvoiceStreet(invoiceStreet);
    }
    
    public void InvoiceItemDataOnDemand.setOrderConfirmationNumber(InvoiceItem obj, int index) {
        Long orderConfirmationNumber = new Integer(index).longValue();
        obj.setOrderConfirmationNumber(orderConfirmationNumber);
    }
    
    public void InvoiceItemDataOnDemand.setOrderNumber(InvoiceItem obj, int index) {
        Long orderNumber = new Integer(index).longValue();
        obj.setOrderNumber(orderNumber);
    }
    
    public void InvoiceItemDataOnDemand.setPriceNet(InvoiceItem obj, int index) {
        BigDecimal priceNet = BigDecimal.valueOf(index);
        obj.setPriceNet(priceNet);
    }
    
    public void InvoiceItemDataOnDemand.setProduct(InvoiceItem obj, int index) {
        Product product = productDataOnDemand.getSpecificProduct(index);
        obj.setProduct(product);
    }
    
    public void InvoiceItemDataOnDemand.setProductName(InvoiceItem obj, int index) {
        String productName = "productName_" + index;
        obj.setProductName(productName);
    }
    
    public void InvoiceItemDataOnDemand.setProductNumber(InvoiceItem obj, int index) {
        Long productNumber = new Integer(index).longValue();
        obj.setProductNumber(productNumber);
    }
    
    public void InvoiceItemDataOnDemand.setQuantity(InvoiceItem obj, int index) {
        int quantity = index;
        obj.setQuantity(quantity);
    }
    
    public void InvoiceItemDataOnDemand.setStatus(InvoiceItem obj, int index) {
        Status status = Status.class.getEnumConstants()[0];
        obj.setStatus(status);
    }
    
    public InvoiceItem InvoiceItemDataOnDemand.getSpecificInvoiceItem(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        InvoiceItem obj = data.get(index);
        Long id = obj.getId();
        return invoiceItemService.findInvoiceItem(id);
    }
    
    public InvoiceItem InvoiceItemDataOnDemand.getRandomInvoiceItem() {
        init();
        InvoiceItem obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return invoiceItemService.findInvoiceItem(id);
    }
    
    public boolean InvoiceItemDataOnDemand.modifyInvoiceItem(InvoiceItem obj) {
        return false;
    }
    
    public void InvoiceItemDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = invoiceItemService.findInvoiceItemEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'InvoiceItem' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<InvoiceItem>();
        for (int i = 0; i < 10; i++) {
            InvoiceItem obj = getNewTransientInvoiceItem(i);
            try {
                invoiceItemService.saveInvoiceItem(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            invoiceItemRepository.flush();
            data.add(obj);
        }
    }
    
}
