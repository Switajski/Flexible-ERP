// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.switajski.priebes.flexibleorders.domain;

import de.switajski.priebes.flexibleorders.domain.Customer;
import de.switajski.priebes.flexibleorders.domain.CustomerDataOnDemand;
import de.switajski.priebes.flexibleorders.domain.CustomerService;
import de.switajski.priebes.flexibleorders.reference.Country;
import de.switajski.priebes.flexibleorders.repository.CustomerRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CustomerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CustomerDataOnDemand: @Component;
    
    private Random CustomerDataOnDemand.rnd = new SecureRandom();
    
    private List<Customer> CustomerDataOnDemand.data;
    
    @Autowired
    CustomerService CustomerDataOnDemand.customerService;
    
    @Autowired
    CustomerRepository CustomerDataOnDemand.customerRepository;
    
    public Customer CustomerDataOnDemand.getNewTransientCustomer(int index) {
        Customer obj = new Customer();
        setCity(obj, index);
        setCountry(obj, index);
        setCreated(obj, index);
        setEmail(obj, index);
        setName1(obj, index);
        setName2(obj, index);
        setPostalCode(obj, index);
        setShortName(obj, index);
        setStreet(obj, index);
        return obj;
    }
    
    public void CustomerDataOnDemand.setCity(Customer obj, int index) {
        String city = "city_" + index;
        obj.setCity(city);
    }
    
    public void CustomerDataOnDemand.setCountry(Customer obj, int index) {
        Country country = Country.class.getEnumConstants()[0];
        obj.setCountry(country);
    }
    
    public void CustomerDataOnDemand.setCreated(Customer obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void CustomerDataOnDemand.setEmail(Customer obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void CustomerDataOnDemand.setName1(Customer obj, int index) {
        String name1 = "name1_" + index;
        obj.setName1(name1);
    }
    
    public void CustomerDataOnDemand.setName2(Customer obj, int index) {
        String name2 = "name2_" + index;
        obj.setName2(name2);
    }
    
    public void CustomerDataOnDemand.setPostalCode(Customer obj, int index) {
        int postalCode = index;
        obj.setPostalCode(postalCode);
    }
    
    public void CustomerDataOnDemand.setShortName(Customer obj, int index) {
        String shortName = "shortName_" + index;
        obj.setShortName(shortName);
    }
    
    public void CustomerDataOnDemand.setStreet(Customer obj, int index) {
        String street = "street_" + index;
        obj.setStreet(street);
    }
    
    public Customer CustomerDataOnDemand.getSpecificCustomer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Customer obj = data.get(index);
        Long id = obj.getId();
        return customerService.findCustomer(id);
    }
    
    public Customer CustomerDataOnDemand.getRandomCustomer() {
        init();
        Customer obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return customerService.findCustomer(id);
    }
    
    public boolean CustomerDataOnDemand.modifyCustomer(Customer obj) {
        return false;
    }
    
    public void CustomerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = customerService.findCustomerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Customer' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Customer>();
        for (int i = 0; i < 10; i++) {
            Customer obj = getNewTransientCustomer(i);
            try {
                customerService.saveCustomer(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            customerRepository.flush();
            data.add(obj);
        }
    }
    
}
